@page "/"
@using EmployeeManager.Services
@using EmployeeManager.ViewModels
@using System.Text.Json
@inject EmployeeService EmployeeService
@inject ILogger<Index> Logger
@inject AppState AppState
@inject IDialogService DialogService
@inject DepartmentService DepartmentService
@inject SalaryService SalaryService
@inject IJSRuntime JsRuntime

<PageTitle>Employee Manager</PageTitle>

<MudStack>

    <MudPaper Class="pa-4 d-flex align-center gap-4">
        <MudIcon Icon="@Icons.Filled.PermContactCalendar" Size="Size.Large" Color="Color.Primary"/>
        <MudText Typo="Typo.h4">Employee Manager</MudText>
        <MudSpacer/>
        @if (!isExporting)
        {
            <MudIconButton Icon="@Icons.Filled.FileDownload" OnClick="@(() => isExporting = true)"/>
        }
        else
        {
            <MudButton
                StartIcon="@Icons.Filled.Close"
                OnClick="@(() => { isExporting = false; _employeesToExport.Clear(); })">
                Cancel
            </MudButton>
            <MudButton 
                StartIcon="@Icons.Filled.FileDownload"
                OnClick="Export">
                Export
            </MudButton>
        }
        <MudIconButton Icon="@Icons.Filled.Settings" OnClick="@(() => DialogService.Show<Settings>("Settings"))"/>
    </MudPaper>

    @if (AppState.DepartmentFilter.IsActive || AppState.GenderFilter.IsActive
         || AppState.SalaryFilter.IsActive || AppState.CurrentEmployeeFilter.IsActive)
    {
        <MudPaper Class="pa-4 d-flex align-center gap-4">
            <MudText>Filters:</MudText>
            @if (AppState.GenderFilter.GetAllowedValue(out var gender))
            {
                <MudChip Color="@(gender == "M" ? Color.Tertiary : Color.Secondary)"
                         OnClose="@(() => { AppState.GenderFilter.IsActive = false; LoadEmployees(); })">
                    Gender:
                    @(gender == "M" ? "Male" : "Female")
                </MudChip>
            }

            @if (AppState.DepartmentFilter.GetAllowedValue(out var department))
            {
                <MudChip Color="Color.Primary"
                         OnClose="@(() => { AppState.DepartmentFilter.IsActive = false; LoadEmployees(); })">
                    Department: @DepartmentService.GetDepartment(department).DeptName
                </MudChip>
            }

            @if (AppState.SalaryFilter.GetAllowedValue(out var salary))
            {
                <MudChip Color="Color.Success"
                         OnClose="@(() => { AppState.SalaryFilter.IsActive = false; LoadEmployees(); })">
                    Salary range: @salary
                </MudChip>
            }

            @if (AppState.CurrentEmployeeFilter.GetAllowedValue(out var isCurrentEmployee))
            {
                <MudChip Color="Color.Info"
                         OnClose="@(() => { AppState.CurrentEmployeeFilter.IsActive = false; LoadEmployees(); })">
                    Employees: @(isCurrentEmployee ? "Current" : "Former")
                </MudChip>
            }
        </MudPaper>
    }

    @if (_employees is not null && _employees.Any())
    {
        <MudPaper Class="pa-4">
            <MudStack>
                @foreach (var employee in _employees)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center">

                        @if (isExporting)
                        {
                            <MudCheckBox
                                Dense="true" Class="ma-n1"
                                CheckedChanged="@(new Action<bool>(isChecked => ToggleIncludeInExport(isChecked, employee)))"/>
                        }

                        <MudIcon Size="Size.Small" Icon="@(employee.IsMale ? Icons.Filled.Male : Icons.Filled.Female)"
                                 Color="@GenderIconColor(employee)"/>

                        <MudText Style="@(employee.IsCurrentEmployee ? "" : "opacity: 0.5;")">
                            @employee.JobTitle <strong>@employee.FirstName @employee.LastName</strong>
                        </MudText>

                        <MudIcon Size="Size.Small" Icon="@Icons.Filled.AttachMoney"
                                 Color="@(employee.IsCurrentEmployee ? Color.Success : Color.Default)"/>
                        <MudText>@employee.Salary</MudText>

                        <MudIcon Size="Size.Small" Icon="@Icons.Filled.Assignment"
                                 Color="@(employee.IsCurrentEmployee ? Color.Warning : Color.Default)"/>
                        <MudText>@employee.DepartmentName</MudText>

                    </MudStack>
                }
            </MudStack>
        </MudPaper>

        @if (_employees.Count() >= AppState.ItemsPerPage && !isExporting)
        {
            <MudPaper Class="pa-4">
                <MudButton Color="Color.Primary" OnClick="LoadEmployees">Load next @AppState.ItemsPerPage employees</MudButton>
                <MudButton Color="Color.Default" OnClick="@(() => { AppState.LastEmployeeId = null; LoadEmployees(); })">Back to first page</MudButton>
            </MudPaper>
        }
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5">No employees found</MudText>
        </MudPaper>
    }

</MudStack>

@code
{
    bool isExporting;

    static Color GenderIconColor(EmployeeView employee) => (employee.IsCurrentEmployee, employee.IsMale) switch
    { 
        (false, _) => Color.Default,
        (true, true) => Color.Tertiary, 
        (true, false) => Color.Secondary
        };

    IEnumerable<EmployeeView>? _employees;

    List<EmployeeView> _employeesToExport = new();

    void ToggleIncludeInExport(bool isChecked, EmployeeView employee)
    {
        if (isChecked)
            _employeesToExport.Add(employee);
        else
            _employeesToExport.Remove(employee);
    }

    void LoadEmployees()
    {
        _employees = EmployeeService.GetEmployees();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Logger.LogInformation("Initializing");
        AppState.OnFiltersChange += LoadEmployees;
        LoadEmployees();
    }

    void Dispose()
    {
        Logger.LogInformation("Disposing");
        AppState.OnFiltersChange -= LoadEmployees;
    }

    void Export()
    {
        Logger.LogInformation("Exporting {Count} employees", _employeesToExport.Count);
        
        var exportData = new
        {
            Employees = _employeesToExport.Select(employeeView => new
            {
                employeeView.FirstName,
                employeeView.LastName,
                employeeView.JobTitle,
                employeeView.DepartmentName,
                employeeView.Salary,
                SalarySum = SalaryService.GetSumOfSalaries(employeeView.Id)
            })
        };
        
        var json = JsonSerializer.Serialize(exportData);
        
        JsRuntime.InvokeAsync<object>("saveFile", "employees.json", json);
        
        _employeesToExport.Clear();
        isExporting = false;
    }
}