@page "/"
@using EmployeeManager.Services
@using EmployeeManager.ViewModels
@inject EmployeeViewService EmployeeService
@inject ILogger<Index> Logger
@inject AppState AppState
@inject IDialogService DialogService

<PageTitle>Employee Manager</PageTitle>

<MudStack>

    <MudPaper Class="pa-4 d-flex align-center gap-4">
        <MudIcon Icon="@Icons.Filled.PermContactCalendar" Size="Size.Large" Color="Color.Primary"/>
        <MudText Typo="Typo.h4">Employee Manager</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Filled.Settings" OnClick="@(() => DialogService.Show<Settings>("Settings"))"/>
    </MudPaper>

    @if (AppState.DepartmentFilter.IsActive || AppState.GenderFilter.IsActive || AppState.SalaryFilter.IsActive)
    {
        <MudPaper Class="pa-4 d-flex align-center gap-4">
            <MudText>Filters:</MudText>
            @if (AppState.GenderFilter.GetAllowedValue(out var genderChar))
            {
                <MudChip Color="@(genderChar == 'M' ? Color.Tertiary : Color.Secondary)"
                         OnClose="@(() => AppState.GenderFilter.IsActive = false)">
                    Gender:
                    @(genderChar == 'M' ? "Male" : "Female")
                </MudChip>
            }

            @if (AppState.DepartmentFilter.GetAllowedValue(out var department))
            {
                <MudChip Color="Color.Primary"
                         OnClose="@(() => AppState.DepartmentFilter.IsActive = false)">
                    Department: @department
                </MudChip>
            }

            @if (AppState.SalaryFilter.GetAllowedValue(out var salary))
            {
                <MudChip Color="Color.Success"
                         OnClose="@(() => AppState.SalaryFilter.IsActive = false)">
                    Salary range: @salary
                </MudChip>
            }
        </MudPaper>
    }

    @if (_employees is not null && _employees.Any())
    {
        <MudPaper Class="pa-4 d-flex justify-center">
            <MudPagination Count="@TotalPages" SelectedChanged="@ChangePage"/>
        </MudPaper>

        <MudPaper Class="pa-4">
            <MudStack>
                @foreach (var employee in _employees)
                {
                    <MudStack Row="true">
                        <MudIcon Size="Size.Small" Icon="@(employee.IsMale ? Icons.Filled.Male : Icons.Filled.Female)"
                                 Color="@(employee.IsMale ? Color.Tertiary : Color.Secondary)"/>
                        <MudText>
                            @employee.JobTitle <strong>@employee.FirstName @employee.LastName</strong>
                        </MudText>
                        <MudIcon Size="Size.Small" Icon="@Icons.Filled.AttachMoney" Color="Color.Success"/>
                        <MudText>@employee.Salary</MudText>
                        <MudIcon Size="Size.Small" Icon="@Icons.Filled.Assignment" Color="Color.Warning"/>
                        <MudText>@employee.DepartmentName</MudText>
                    </MudStack>
                }
            </MudStack>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudButton Color="Color.Primary" OnClick="LoadEmployees">Load Employees</MudButton>
        </MudPaper>
    }

</MudStack>

@code
{
    int _selectedPage = 1;

    IEnumerable<EmployeeView>? _employees;

    int TotalPages => EmployeeService.GetEmployeesCount() / AppState.ItemsPerPage + 1;

    int Offset => (_selectedPage - 1) * AppState.ItemsPerPage;

    void LoadEmployees()
    {
        Logger.LogInformation("Loading employees (page {Page}, offset {Offset})", _selectedPage, Offset);
        _employees = EmployeeService.GetEmployees(Offset, AppState.ItemsPerPage);
    }

    void UnloadEmployees()
    {
        Logger.LogInformation("Unloading employees");
        _employees = null;
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        Logger.LogInformation("Changing page to {Page}", page);
        _selectedPage = page;
        LoadEmployees();
    }

    protected override void OnInitialized()
    {
        Logger.LogInformation("Initializing");
        AppState.OnFiltersChange += UnloadEmployees;
    }
    
    void Dispose()
    {
        Logger.LogInformation("Disposing");
        AppState.OnFiltersChange -= UnloadEmployees;
    }
}